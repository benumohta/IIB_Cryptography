

CREATE COMPUTE MODULE EncrptionNodetest_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--CALL CopyEntireMessage();
		SET OutputLocalEnvironment =  InputLocalEnvironment;
		SET OutputLocalEnvironment.Cryptography.Encryption.Field1 = 'Benu';		
		SET OutputLocalEnvironment.Cryptography.Encryption.Field2 = 'Gopal';		
		SET OutputLocalEnvironment.Cryptography.Encryption.Field3 = 'Mohta';
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;




CREATE COMPUTE MODULE EncrptionNodetest_CopyEncrypted
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();		
		SET OutputRoot.XMLNSC.EncryptedData.Encryption = InputLocalEnvironment.Cryptography.Encryption;
		--CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
